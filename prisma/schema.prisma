// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  address  String    @unique
  votes    Vote[]
  passport Passport?
  poaps    Poap[]
  Arkham   Arkham[]
}

model Arkham {
  id                Int     @id @default(autoincrement())
  address           String
  chain             String
  entity_name       String?
  entity_note       String?
  entity_id         String?
  entity_type       String?
  entity_service    String?
  entity_addresses  Json?
  entity_website    String?
  entity_twitter    String?
  entity_crunchbase String?
  entity_linkedin   String?

  label_name      String?
  label_address   String?
  label_chainType String?
  contract        Boolean
  isUserAddress   Boolean

  user User @relation(fields: [address], references: [address])

  @@unique([address, chain], name: "uid")
}

model Passport {
  id             Int    @id @default(autoincrement())
  userAddress    String @unique
  score          Float
  scoreThreshold Float
  scoreTimestamp BigInt
  user           User   @relation(fields: [userAddress], references: [address])
  updatedAt      Int
  stamps         Json?
}

model Poap {
  id          Int      @id @default(autoincrement())
  poapId      Int
  fancy_id    String
  name        String
  event_url   String
  image_url   String
  country     String
  city        String
  description String
  year        Int
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  expiry_date DateTime @db.Date
  supply      Int
  tokenId     String
  owner       String
  chain       String
  created     DateTime
  poapOwner   User     @relation(fields: [owner], references: [address])

  @@unique([fancy_id, owner, tokenId], name: "uid")
}

model Program {
  id             Int     @id @default(autoincrement())
  programAddress String  @unique
  Rounds         Round[]
}

model Round {
  id                     Int                    @id @default(autoincrement())
  amountUSD              Int
  votes                  Int
  token                  String
  matchAmount            String
  matchAmountUSD         Float
  uniqueContributors     Int
  applicationMetaPtr     String
  applicationMetadata    Json
  metaPtr                String
  metadata               Json
  applicationsStartTime  BigInt?
  applicationsEndTime    BigInt?
  roundStartTime         BigInt?
  roundEndTime           BigInt?
  createdAt              BigInt                 @default(0)
  updatedAt              BigInt                 @default(0)
  createdAtBlock         Int
  updatedAtBlock         Int
  // user generated fields
  addedLastApplications  Boolean                @default(false)
  addedLastVotes         Boolean                @default(false)
  addedLastPassports     Boolean                @default(false)
  chainId                Int
  roundId                String
  programContractAddress String?
  program                Program?               @relation(fields: [programContractAddress], references: [programAddress])
  projects               ApplicationsInRounds[]
  Vote                   Vote[]
  MatchingDistribution   MatchingDistribution[]

  @@unique([chainId, roundId], name: "uid")
}

model ApplicationsInRounds {
  // id                  String  @unique
  roundId             Int
  projectId           Int
  applicationId       Int
  status              String
  amountUSD           Float
  votes               Int
  payoutAddress       String
  uniqueContributors  Int
  project_name        String
  project_desc        String
  project_website     String
  user_github         String?
  project_github      String?
  applicationMetadata Json?
  transaction         String
  tx_gasPrice         BigInt?
  tx_gasSpent         BigInt?
  round               Round   @relation(fields: [roundId], references: [id])
  project             Project @relation(fields: [projectId], references: [id])

  @@id([roundId, projectId, applicationId])
}

model Project {
  id         Int                    @id @default(autoincrement())
  projectKey String                 @unique
  rounds     ApplicationsInRounds[]
  votes      Vote[]
}

model Vote {
  id               Int     @id @default(autoincrement())
  voteId           String?
  transaction      String
  blockNumber      Int
  projectId        Int
  chainId          Int
  project          Project @relation(fields: [projectId], references: [id])
  applicationId    String?
  roundId          Int
  round            Round   @relation(fields: [roundId], references: [id])
  voter            String
  voterUser        User    @relation(fields: [voter], references: [address])
  grantAddress     String
  token            String
  amount           String
  amountUSD        Float
  amountRoundToken String
  tx_gasPrice      BigInt  @default(0)
  tx_gasSpent      BigInt  @default(0)
  tx_timestamp     BigInt  @default(0)

  @@unique([transaction, roundId, projectId], name: "uid")
}

model MatchingDistribution {
  id                            Int     @id @default(autoincrement())
  contributionsCount            Int
  projectPayoutAddress          String
  applicationId                 Int
  projectId                     String
  matchPoolPercentage           Float
  projectName                   String
  matchAmountInTokenHex         String
  matchAmountInToken            String
  originalMatchAmountInTokenHex String
  originalMatchAmountInToken    String
  matchAmountUSD                Float?
  originalMatchAmountUSD        Float?
  index                         Int
  chainId                       Int
  roundKey                      Int
  roundId                       String?
  round                         Round   @relation(fields: [roundKey], references: [id])

  @@unique([projectName, projectId, applicationId, matchPoolPercentage, contributionsCount], name: "uid")
}

model AlphaMatching {
  id               BigInt  @id @default(autoincrement())
  round_num        BigInt?
  grant_id         String? @db.VarChar(255)
  title            String? @db.VarChar(255)
  match_amount_dai Float?
  sub_round_slug   String? @db.VarChar(255)
}

model AlphaRoundGranteeAddresses {
  id            BigInt  @id @default(autoincrement())
  title         String? @db.VarChar(255)
  address       String? @db.VarChar(255)
  round_name    String? @db.VarChar(255)
  round_address String? @db.VarChar(255)
}

model AlphaRoundsAllDonations {
  id             BigInt    @id @default(autoincrement())
  title          String?   @db.VarChar(255)
  round_name     String?   @db.VarChar(255)
  usd_amount     Float?
  block_time     DateTime? @db.Timestamptz(6)
  donor          String?   @db.VarChar(255)
  token_quantity Decimal?
}

model cgrantsContributions {
  id            BigInt    @id @default(autoincrement())
  voter_address String?
  grant_id      BigInt?
  created_on    DateTime?
  amountUSD     Float?
  checkout_type String?
  tx_id         String?
  match         Boolean?
  token_address String?
  token_symbol  String?
  amountToken   Float?
  gas_price     Float?
  anonymous     Boolean?
}

model cgrantsGrants {
  id            BigInt    @id @default(autoincrement())
  grantid       BigInt?
  createdon     DateTime? @db.Timestamptz(6)
  name          String?   @db.VarChar(255)
  slug          String?   @db.VarChar(255)
  websiteurl    String?   @db.VarChar(255)
  logo          String?   @db.VarChar(255)
  payoutaddress String?   @db.VarChar(255)
  newgrantid    String?
  twitter       String?   @db.VarChar(255)
  github        String?   @db.VarChar(255)
  region        String?   @db.VarChar(255)
  description   String?
}

model cgrantsMatches {
  id             BigInt  @id @default(autoincrement())
  round_num      BigInt?
  sub_round_id   BigInt?
  sub_round_slug String? @db.VarChar(255)
  grant_id       BigInt?
  match_amount   Float?
}

model cgrantsRoundTimings {
  id         BigInt    @id @default(autoincrement())
  round_num  BigInt?
  start_date DateTime? @db.Timestamptz(6)
  end_date   DateTime? @db.Timestamptz(6)
}

model GrantsProgramRoundsOnGrantsStack {
  id            BigInt    @id @default(autoincrement())
  program       String?   @db.VarChar(255)
  type          String?   @db.VarChar(255)
  chain_name    String?   @db.VarChar(255)
  chain_id      BigInt?
  round_name    String?   @db.VarChar(255)
  round_id      String?   @db.VarChar(255)
  matching_pool BigInt?
  starting_time DateTime? @db.Timestamptz(6)
}

model GrantsByRound {
  id                        BigInt  @id @default(autoincrement())
  round_num                 BigInt?
  title                     String? @db.VarChar(255)
  total_unique_contributors BigInt?
  total_contributions       BigInt?
  total_crowdfund_amount    Float?
  total_match_amount        Float?
  total_funding             Float?
  themes                    String? @db.VarChar(255)
}

model OrgName {
  id                        BigInt  @id @default(autoincrement())
  round_num                 BigInt?
  title                     String? @db.VarChar(255)
  total_unique_contributors BigInt?
  total_contributions       BigInt?
  total_crowdfund_amount    Float?
  total_match_amount        Float?
  total_funding             Float?
  themes                    String? @db.VarChar(255)
  name                      String? @db.VarChar(255)
  grantid                   BigInt?
  payoutaddress             String? @db.VarChar(255)
  github                    String? @db.VarChar(255)
  substring                 String?
}
